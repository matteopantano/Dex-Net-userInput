import json

import numpy as np
from cv2 import transform


def sample_points(point_number = 10):
	points = []
	for point_idx in range(point_number):
		mean = [0.0, 0.0, 0.005]
		standard_deviations = [0.01, 0.01, 0.005]
		points.append( np.random.normal(mean, standard_deviations))
	return points

def save_points(points, point_dir):
	for point_idx, point in enumerate(points):
		point_path = point_dir + str(point_idx) + "_point.txt"
		np.savetxt(point_path , point)
	return 

def transform_camera_poses_nerf_to_dexnet(camera_pose_path):
    with open(camera_pose_path, 'r') as f:
        data = json.load(f)
    transform_matrices = []
    for pose_idx, pose in enumerate(data):
        transform_matrix = pose['transform_matrix']
        transform_matrices.append(np.array([transform_matrix[0], transform_matrix[1], transform_matrix[2], transform_matrix[3]]))
    return transform_matrices

def save_camera_poses(transform_matrices, camera_pose_path):
    for matrix_idx, transform_matrix in enumerate(transform_matrices):
        new_file_name = camera_pose_path.strip(".json") + str(matrix_idx) + "_pose" + ".txt"
        np.savetxt(new_file_name, transform_matrix)

if __name__ == '__main__':
    ''' 
    This script converts saved camera poses from the NeRF to the Dex-Net format.
    '''

    NeRF_camera_pose_path = '/home/vladislav/gqcnn/fmp-tools/test-25-07/testtransforms_.json'
   
    transform_matrices = transform_camera_poses_nerf_to_dexnet(NeRF_camera_pose_path)
    save_camera_poses(transform_matrices, NeRF_camera_pose_path)
    
    # fake and save tracepen points
    # point_number = 10
    # points = sample_points(point_number)
    # point_path = "./fmp-tools/test-25-07/points/"
    # save_points(points, point_path)

